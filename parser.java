
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\007\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\007\000\002\007\006\000\002\007\010\000\002\010" +
    "\004\000\002\010\002\000\002\011\014\000\002\011\013" +
    "\000\002\011\013\000\002\011\014\000\002\012\003\000" +
    "\002\012\002\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\014\003\000\002\014" +
    "\002\000\002\015\005\000\002\015\003\000\002\016\004" +
    "\000\002\016\006\000\002\017\004\000\002\017\002\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\023\007\000\002\024\006" +
    "\000\002\025\007\000\002\025\007\000\002\025\007\000" +
    "\002\021\006\000\002\021\007\000\002\026\005\000\002" +
    "\026\004\000\002\027\005\000\002\027\005\000\002\030" +
    "\007\000\002\030\006\000\002\022\010\000\002\031\005" +
    "\000\002\031\003\000\002\032\003\000\002\032\006\000" +
    "\002\033\005\000\002\033\003\000\002\034\005\000\002" +
    "\034\003\000\002\036\003\000\002\036\002\000\002\035" +
    "\005\000\002\035\003\000\002\037\003\000\002\037\005" +
    "\000\002\037\006\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\005\000\002\037\004\000\002\037" +
    "\004\000\002\037\004\000\002\037\006\000\002\037\003" +
    "\000\002\037\011\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\006\005\001\002\000\004\002\322\001" +
    "\002\000\004\061\006\001\002\000\004\035\007\001\002" +
    "\000\020\036\ufffd\047\016\050\010\051\023\052\022\053" +
    "\013\057\021\001\002\000\006\032\uffea\061\uffea\001\002" +
    "\000\016\036\ufff6\047\016\050\010\051\023\052\022\053" +
    "\013\001\002\000\004\036\316\001\002\000\006\032\uffe8" +
    "\061\uffe8\001\002\000\020\036\ufffa\047\016\050\010\051" +
    "\023\052\022\053\013\057\021\001\002\000\004\036\ufffe" +
    "\001\002\000\004\061\300\001\002\000\004\036\uffff\001" +
    "\002\000\004\061\126\001\002\000\012\050\010\051\023" +
    "\052\022\053\013\001\002\000\006\032\uffe9\061\uffe9\001" +
    "\002\000\006\032\uffe7\061\uffe7\001\002\000\004\061\025" +
    "\001\002\000\006\004\ufff1\005\026\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\004\004" +
    "\030\001\002\000\040\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\035\ufff5\036\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\057\ufff5\061\ufff5\001\002\000\030" +
    "\015\036\017\031\031\044\037\037\045\035\046\040\061" +
    "\041\062\033\063\046\064\043\065\034\001\002\000\046" +
    "\004\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\032\uffbc\034\uffbc\042\uffbc\043\uffbc\044\uffbc\001\002\000" +
    "\046\004\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\034\uffb9\042\uffb9\043\uffb9\044\uffb9\001\002" +
    "\000\046\004\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\032\uffb7\034\uffb7\042\uffb7\043\uffb7\044\uffb7\001" +
    "\002\000\046\004\uffb5\013\uffb5\014\uffb5\015\uffb5\017\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\032\uffb5\034\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\001\002\000\030\015\036\017\031\031\044\037\037\045" +
    "\035\046\040\061\041\062\033\063\046\064\043\065\034" +
    "\001\002\000\030\015\036\017\031\031\044\037\037\045" +
    "\035\046\040\061\041\062\033\063\046\064\043\065\034" +
    "\001\002\000\046\004\uffb4\013\uffb4\014\uffb4\015\uffb4\017" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\032\uffb4\034\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\001\002\000\052\004\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\112\032\uffc6\033\111\034\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\001\002\000\046\004\uffae\013" +
    "\uffae\014\uffae\015\uffae\017\uffae\021\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\032\uffae\034" +
    "\uffae\042\uffae\043\uffae\044\uffae\001\002\000\046\004\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\017\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\032\uffb8" +
    "\034\uffb8\042\uffb8\043\uffb8\044\uffb8\001\002\000\040\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\050\010" +
    "\051\023\052\022\053\013\061\041\062\033\063\046\064" +
    "\043\065\034\001\002\000\034\004\ufff2\013\056\014\060" +
    "\015\057\017\047\021\062\022\061\023\055\024\053\025" +
    "\051\026\054\027\052\030\050\001\002\000\046\004\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\017\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\032\uffb6" +
    "\034\uffb6\042\uffb6\043\uffb6\044\uffb6\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\030\015" +
    "\036\017\031\031\044\037\037\045\035\046\040\061\041" +
    "\062\033\063\046\064\043\065\034\001\002\000\046\004" +
    "\uffa8\013\056\014\060\015\057\017\047\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\032" +
    "\uffa8\034\uffa8\042\uffa8\043\uffa8\044\uffa8\001\002\000\046" +
    "\004\uffa7\013\056\014\060\015\057\017\047\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7" +
    "\032\uffa7\034\uffa7\042\uffa7\043\uffa7\044\uffa7\001\002\000" +
    "\046\004\uffab\013\uffab\014\uffab\015\uffab\017\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\032\uffab\034\uffab\042\uffab\043\uffab\044\uffab\001\002" +
    "\000\046\004\uffaa\013\056\014\060\015\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\030\uffaa\032\uffaa\034\uffaa\042\uffaa\043\uffaa\044\uffaa\001" +
    "\002\000\046\004\uffac\013\uffac\014\uffac\015\uffac\017\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\032\uffac\034\uffac\042\uffac\043\uffac\044\uffac" +
    "\001\002\000\046\004\uffa6\013\056\014\060\015\057\017" +
    "\047\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\032\uffa6\034\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\001\002\000\046\004\uffa4\013\056\014\060\015\057" +
    "\017\047\021\062\022\061\023\055\024\053\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\032\uffa4\034\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\001\002\000\046\004\uffa5\013\056\014\060\015" +
    "\057\017\047\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\030\uffa5\032\uffa5\034\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\001\002\000\046\004\uffa2\013\056\014\060" +
    "\015\057\017\047\021\062\022\061\023\055\024\053\025" +
    "\051\026\054\027\uffa2\030\050\032\uffa2\034\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\001\002\000\046\004\uffa3\013\056\014" +
    "\060\015\057\017\047\021\062\022\061\023\055\024\053" +
    "\025\uffa3\026\uffa3\027\uffa3\030\uffa3\032\uffa3\034\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\001\002\000\046\004\uffa1\013\056" +
    "\014\060\015\057\017\047\021\062\022\061\023\055\024" +
    "\053\025\051\026\054\027\uffa1\030\uffa1\032\uffa1\034\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\001\002\000\046\004\uffa9\013" +
    "\056\014\060\015\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\032\uffa9\034" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\001\002\000\036\013\056" +
    "\014\060\015\057\017\047\021\062\022\061\023\055\024" +
    "\053\025\051\026\054\027\052\030\050\032\104\042\103" +
    "\001\002\000\004\032\101\001\002\000\030\015\036\017" +
    "\031\031\044\037\037\045\035\046\040\061\041\062\033" +
    "\063\046\064\043\065\034\001\002\000\046\004\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\034" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\001\002\000\030\015\036" +
    "\017\031\031\044\037\037\045\035\046\040\061\041\062" +
    "\033\063\046\064\043\065\034\001\002\000\046\004\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\017\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\032\uffb3" +
    "\034\uffb3\042\uffb3\043\uffb3\044\uffb3\001\002\000\034\013" +
    "\056\014\060\015\057\017\047\021\062\022\061\023\055" +
    "\024\053\025\051\026\054\027\052\030\050\043\106\001" +
    "\002\000\030\015\036\017\031\031\044\037\037\045\035" +
    "\046\040\061\041\062\033\063\046\064\043\065\034\001" +
    "\002\000\034\013\056\014\060\015\057\017\047\021\062" +
    "\022\061\023\055\024\053\025\051\026\054\027\052\030" +
    "\050\032\110\001\002\000\046\004\uffad\013\uffad\014\uffad" +
    "\015\uffad\017\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\032\uffad\034\uffad\042\uffad" +
    "\043\uffad\044\uffad\001\002\000\030\015\036\017\031\031" +
    "\044\037\037\045\035\046\040\061\041\062\033\063\046" +
    "\064\043\065\034\001\002\000\032\015\036\017\031\031" +
    "\044\032\115\037\037\045\035\046\040\061\041\062\033" +
    "\063\046\064\043\065\034\001\002\000\004\032\120\001" +
    "\002\000\036\013\056\014\060\015\057\017\047\021\062" +
    "\022\061\023\055\024\053\025\051\026\054\027\052\030" +
    "\050\032\uffc3\044\116\001\002\000\046\004\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\034\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\001\002\000\030\015\036\017" +
    "\031\031\044\037\037\045\035\046\040\061\041\062\033" +
    "\063\046\064\043\065\034\001\002\000\004\032\uffc4\001" +
    "\002\000\046\004\uffba\013\uffba\014\uffba\015\uffba\017\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\032\uffba\034\uffba\042\uffba\043\uffba\044\uffba" +
    "\001\002\000\034\013\056\014\060\015\057\017\047\021" +
    "\062\022\061\023\055\024\053\025\051\026\054\027\052" +
    "\030\050\034\122\001\002\000\054\004\uffc5\005\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\034" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\001\002" +
    "\000\046\004\uffb2\013\uffb2\014\uffb2\015\uffb2\017\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\032\uffb2\034\uffb2\042\uffb2\043\uffb2\044\uffb2\001" +
    "\002\000\046\004\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\032\uffb0\034\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\001\002\000\046\004\uffb1\013\uffb1\014\uffb1\015\uffb1\017" +
    "\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\032\uffb1\034\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\001\002\000\012\004\ufff1\005\026\031\130\033\127" +
    "\001\002\000\004\062\275\001\002\000\014\032\uffe5\050" +
    "\010\051\023\052\022\053\013\001\002\000\004\004\132" +
    "\001\002\000\040\007\ufff4\010\ufff4\011\ufff4\012\ufff4\035" +
    "\ufff4\036\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\057\ufff4\061\ufff4\001\002\000\006\032" +
    "\uffe3\044\273\001\002\000\004\061\270\001\002\000\004" +
    "\032\uffe6\001\002\000\004\032\137\001\002\000\004\035" +
    "\140\001\002\000\036\007\141\010\163\011\160\012\151" +
    "\035\147\036\uffdf\050\010\051\023\052\022\053\013\054" +
    "\153\055\145\057\021\061\156\001\002\000\004\031\260" +
    "\001\002\000\036\007\ufff8\010\ufff8\011\ufff8\012\ufff8\035" +
    "\ufff8\036\ufff8\050\010\051\023\052\022\053\013\054\ufff8" +
    "\055\ufff8\057\021\061\ufff8\001\002\000\030\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\035\uffdb\036\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\060\uffdb\061\uffdb\001\002\000\004\061\256\001" +
    "\002\000\004\031\252\001\002\000\024\007\141\010\163" +
    "\011\160\012\151\035\147\036\uffdf\054\153\055\145\061" +
    "\156\001\002\000\036\007\141\010\163\011\160\012\151" +
    "\035\147\036\uffdf\050\010\051\023\052\022\053\013\054" +
    "\153\055\145\057\021\061\156\001\002\000\030\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\035\uffd9\036\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\060\uffd9\061\uffd9\001\002\000\032\004\235" +
    "\015\036\017\031\031\044\037\037\045\035\046\040\061" +
    "\041\062\033\063\046\064\043\065\034\001\002\000\030" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\035\uffde\036\uffde\054" +
    "\uffde\055\uffde\056\uffde\060\uffde\061\uffde\001\002\000\004" +
    "\031\224\001\002\000\030\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\035\uffdc\036\uffdc\054\uffdc\055\uffdc\056\uffdc\060\uffdc" +
    "\061\uffdc\001\002\000\030\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\035\uffda\036\uffda\054\uffda\055\uffda\056\uffda\060\uffda" +
    "\061\uffda\001\002\000\014\005\uffc6\031\216\033\111\040" +
    "\uffc6\041\uffc6\001\002\000\004\036\213\001\002\000\004" +
    "\031\206\001\002\000\030\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\035\uffd8\036\uffd8\054\uffd8\055\uffd8\056\uffd8\060\uffd8" +
    "\061\uffd8\001\002\000\030\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\035\uffdd\036\uffdd\054\uffdd\055\uffdd\056\uffdd\060\uffdd" +
    "\061\uffdd\001\002\000\004\031\177\001\002\000\030\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\035\uffd7\036\uffd7\054\uffd7" +
    "\055\uffd7\056\uffd7\060\uffd7\061\uffd7\001\002\000\024\007" +
    "\141\010\163\011\160\012\151\035\147\036\uffdf\054\153" +
    "\055\145\061\156\001\002\000\010\005\167\040\171\041" +
    "\170\001\002\000\030\015\036\017\031\031\044\037\037" +
    "\045\035\046\040\061\041\062\033\063\046\064\043\065" +
    "\034\001\002\000\004\004\173\001\002\000\004\004\172" +
    "\001\002\000\030\007\uffcd\010\uffcd\011\uffcd\012\uffcd\035" +
    "\uffcd\036\uffcd\054\uffcd\055\uffcd\056\uffcd\060\uffcd\061\uffcd" +
    "\001\002\000\030\007\uffcc\010\uffcc\011\uffcc\012\uffcc\035" +
    "\uffcc\036\uffcc\054\uffcc\055\uffcc\056\uffcc\060\uffcc\061\uffcc" +
    "\001\002\000\034\004\175\013\056\014\060\015\057\017" +
    "\047\021\062\022\061\023\055\024\053\025\051\026\054" +
    "\027\052\030\050\001\002\000\030\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\035\uffd5\036\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\060\uffd5\061\uffd5\001\002\000\004\036\uffe0\001\002\000" +
    "\030\015\036\017\031\031\044\037\037\045\035\046\040" +
    "\061\041\062\033\063\046\064\043\065\034\001\002\000" +
    "\004\032\204\001\002\000\036\013\056\014\060\015\057" +
    "\017\047\021\062\022\061\023\055\024\053\025\051\026" +
    "\054\027\052\030\050\032\uffbd\044\202\001\002\000\030" +
    "\015\036\017\031\031\044\037\037\045\035\046\040\061" +
    "\041\062\033\063\046\064\043\065\034\001\002\000\004" +
    "\032\uffbe\001\002\000\004\004\205\001\002\000\030\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\035\uffd3\036\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\060\uffd3\061\uffd3\001\002\000\032\015" +
    "\036\017\031\031\044\032\uffbf\037\037\045\035\046\040" +
    "\061\041\062\033\063\046\064\043\065\034\001\002\000" +
    "\004\032\uffc0\001\002\000\004\032\211\001\002\000\004" +
    "\004\212\001\002\000\030\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\035\uffd2\036\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2" +
    "\061\uffd2\001\002\000\020\004\215\036\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\016\036\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\001\002\000" +
    "\042\007\uffec\010\uffec\011\uffec\012\uffec\035\uffec\036\uffec" +
    "\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\060\uffec\061\uffec\001\002\000\032\015\036" +
    "\017\031\031\044\032\220\037\037\045\035\046\040\061" +
    "\041\062\033\063\046\064\043\065\034\001\002\000\004" +
    "\032\222\001\002\000\004\004\221\001\002\000\030\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\035\uffd1\036\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\060\uffd1\061\uffd1\001\002\000\004\004" +
    "\223\001\002\000\030\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\035\uffd0\036\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0\061" +
    "\uffd0\001\002\000\030\015\036\017\031\031\044\037\037" +
    "\045\035\046\040\061\041\062\033\063\046\064\043\065" +
    "\034\001\002\000\034\013\056\014\060\015\057\017\047" +
    "\021\062\022\061\023\055\024\053\025\051\026\054\027" +
    "\052\030\050\032\226\001\002\000\022\007\141\010\163" +
    "\011\160\012\151\035\147\054\153\055\145\061\156\001" +
    "\002\000\006\056\231\060\230\001\002\000\030\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\035\uffc7\036\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\060\uffc7\061\uffc7\001\002\000\022\007\141" +
    "\010\163\011\160\012\151\035\147\054\153\055\145\061" +
    "\156\001\002\000\030\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\035\uffc9\036\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\061" +
    "\uffc9\001\002\000\004\060\234\001\002\000\030\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\035\uffc8\036\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\060\uffc8\061\uffc8\001\002\000\030\007\uffce" +
    "\010\uffce\011\uffce\012\uffce\035\uffce\036\uffce\054\uffce\055" +
    "\uffce\056\uffce\060\uffce\061\uffce\001\002\000\034\004\237" +
    "\013\056\014\060\015\057\017\047\021\062\022\061\023" +
    "\055\024\053\025\051\026\054\027\052\030\050\001\002" +
    "\000\030\007\uffcf\010\uffcf\011\uffcf\012\uffcf\035\uffcf\036" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\001\002" +
    "\000\024\007\141\010\163\011\160\012\151\035\147\036" +
    "\uffdf\054\153\055\145\061\156\001\002\000\004\036\242" +
    "\001\002\000\032\004\215\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\035\uffeb\036\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb" +
    "\061\uffeb\001\002\000\030\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\035\uffca\036\uffca\054\uffca\055\uffca\056\uffca\060\uffca" +
    "\061\uffca\001\002\000\004\036\245\001\002\000\032\004" +
    "\215\007\uffeb\010\uffeb\011\uffeb\012\uffeb\035\uffeb\036\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb\001\002\000" +
    "\030\007\uffcb\010\uffcb\011\uffcb\012\uffcb\035\uffcb\036\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\060\uffcb\061\uffcb\001\002\000" +
    "\004\036\250\001\002\000\020\004\215\036\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000\016\036" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\030\015\036\017\031\031\044\037\037\045\035\046" +
    "\040\061\041\062\033\063\046\064\043\065\034\001\002" +
    "\000\034\013\056\014\060\015\057\017\047\021\062\022" +
    "\061\023\055\024\053\025\051\026\054\027\052\030\050" +
    "\032\254\001\002\000\022\007\141\010\163\011\160\012" +
    "\151\035\147\054\153\055\145\061\156\001\002\000\030" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\035\uffd6\036\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\060\uffd6\061\uffd6\001\002\000\010" +
    "\004\ufff1\005\026\033\127\001\002\000\024\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\035\ufff9\036\ufff9\054\ufff9\055\ufff9" +
    "\061\ufff9\001\002\000\004\061\261\001\002\000\010\032" +
    "\uffc6\033\111\044\uffc6\001\002\000\006\032\uffc1\044\266" +
    "\001\002\000\004\032\264\001\002\000\004\004\265\001" +
    "\002\000\030\007\uffd4\010\uffd4\011\uffd4\012\uffd4\035\uffd4" +
    "\036\uffd4\054\uffd4\055\uffd4\056\uffd4\060\uffd4\061\uffd4\001" +
    "\002\000\004\061\261\001\002\000\004\032\uffc2\001\002" +
    "\000\010\032\uffe2\033\271\044\uffe2\001\002\000\004\034" +
    "\272\001\002\000\006\032\uffe1\044\uffe1\001\002\000\012" +
    "\050\010\051\023\052\022\053\013\001\002\000\004\032" +
    "\uffe4\001\002\000\004\034\276\001\002\000\004\004\277" +
    "\001\002\000\040\007\ufff3\010\ufff3\011\ufff3\012\ufff3\035" +
    "\ufff3\036\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\057\ufff3\061\ufff3\001\002\000\004\031" +
    "\301\001\002\000\014\032\uffe5\050\010\051\023\052\022" +
    "\053\013\001\002\000\004\032\303\001\002\000\004\035" +
    "\304\001\002\000\036\007\141\010\163\011\160\012\151" +
    "\035\147\036\uffdf\050\010\051\023\052\022\053\013\054" +
    "\153\055\145\057\021\061\156\001\002\000\024\007\141" +
    "\010\163\011\160\012\151\035\147\036\uffdf\054\153\055" +
    "\145\061\156\001\002\000\004\036\307\001\002\000\020" +
    "\004\215\036\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\001\002\000\016\036\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\001\002\000\004\036\312\001\002\000" +
    "\020\004\215\036\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\001\002\000\016\036\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\001\002\000\004\036\ufffb\001\002" +
    "\000\004\036\ufffc\001\002\000\004\002\001\001\002\000" +
    "\004\036\ufff7\001\002\000\004\061\321\001\002\000\004" +
    "\031\130\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\011\004\016" +
    "\006\014\007\013\011\010\013\017\001\001\000\002\001" +
    "\001\000\010\006\316\011\010\013\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\314\006\313\007" +
    "\013\011\010\013\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\026\001\001\000\010\032\031\037" +
    "\044\040\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\031\037\124\040\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\031\037\123\040\041\001\001\000\010\032" +
    "\031\037\122\040\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\077\032\031\037\076\040\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\031\037\075\040\041\001" +
    "\001\000\010\032\031\037\074\040\041\001\001\000\010" +
    "\032\031\037\073\040\041\001\001\000\010\032\031\037" +
    "\072\040\041\001\001\000\010\032\031\037\071\040\041" +
    "\001\001\000\010\032\031\037\070\040\041\001\001\000" +
    "\010\032\031\037\067\040\041\001\001\000\010\032\031" +
    "\037\066\040\041\001\001\000\010\032\031\037\065\040" +
    "\041\001\001\000\010\032\031\037\064\040\041\001\001" +
    "\000\010\032\031\037\063\040\041\001\001\000\010\032" +
    "\031\037\062\040\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\031\037\101\040\041\001\001\000\002\001\001\000" +
    "\010\032\031\037\104\040\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\031\037\106\040\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\031" +
    "\037\120\040\041\001\001\000\012\032\031\033\112\037" +
    "\113\040\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\031\033\116\037\113\040" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\130\001\001\000\002" +
    "\001\001\000\012\013\133\014\135\015\134\016\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\145\007\141\013\143\017\156" +
    "\020\164\021\142\022\163\023\151\024\161\025\153\026" +
    "\154\027\147\030\160\032\165\001\001\000\002\001\001" +
    "\000\010\005\256\007\141\013\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\017\246" +
    "\020\164\021\142\022\163\023\151\024\161\025\153\026" +
    "\154\027\147\030\160\032\165\001\001\000\036\005\237" +
    "\007\141\013\143\017\240\020\164\021\142\022\163\023" +
    "\151\024\161\025\153\026\154\027\147\030\160\032\165" +
    "\001\001\000\002\001\001\000\010\032\031\037\235\040" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\017\175\020" +
    "\164\021\142\022\163\023\151\024\161\025\153\026\154" +
    "\027\147\030\160\032\165\001\001\000\002\001\001\000" +
    "\010\032\031\037\173\040\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\031\035\177\037\200\040\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\032\031\035\202\037\200" +
    "\040\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\032\031\035\206\036\207\037\200" +
    "\040\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\031\033" +
    "\216\037\113\040\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\031\037\224\040\041\001\001\000\002" +
    "\001\001\000\026\020\226\021\142\022\163\023\151\024" +
    "\161\025\153\026\154\027\147\030\160\032\165\001\001" +
    "\000\004\031\231\001\001\000\002\001\001\000\026\020" +
    "\232\021\142\022\163\023\151\024\161\025\153\026\154" +
    "\027\147\030\160\032\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\017\243\020\164\021" +
    "\142\022\163\023\151\024\161\025\153\026\154\027\147" +
    "\030\160\032\165\001\001\000\002\001\001\000\004\012" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\250\001\001\000\002\001\001\000\010\032\031" +
    "\037\252\040\041\001\001\000\002\001\001\000\026\020" +
    "\254\021\142\022\163\023\151\024\161\025\153\026\154" +
    "\027\147\030\160\032\165\001\001\000\002\001\001\000" +
    "\004\010\130\001\001\000\002\001\001\000\006\032\261" +
    "\034\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\261\034\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\133" +
    "\015\273\016\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\133\014\301\015\134\016\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\304\007\141" +
    "\013\143\017\305\020\164\021\142\022\163\023\151\024" +
    "\161\025\153\026\154\027\147\030\160\032\165\001\001" +
    "\000\030\017\310\020\164\021\142\022\163\023\151\024" +
    "\161\025\153\026\154\027\147\030\160\032\165\001\001" +
    "\000\002\001\001\000\004\012\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID OPENCURLY memberdecls CLOSECURLY 
            {
              Program RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls m = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(i, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= memfielddecls 
            {
              Memberdecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MemFielddecls f = (MemFielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              Memberdecls RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls m = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Memberdecls(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // memberdecls ::= 
            {
              Memberdecls RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberdecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // memfielddecls ::= fielddecl memfielddecls 
            {
              MemFielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MemFielddecls s = (MemFielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MemFielddecls(f, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memfielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // memfielddecls ::= fielddecl methoddecls 
            {
              MemFielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls m = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MemFielddecls(f, m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memfielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // memfielddecls ::= fielddecl 
            {
              MemFielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MemFielddecls(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memfielddecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fielddecls ::= fielddecl fielddecls 
            {
              Fielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls s = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fielddecls(f, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fielddecls ::= fielddecl 
            {
              Fielddecls RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecl f = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Fielddecls(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecls",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methoddecls ::= methoddecl methoddecls 
            {
              Methoddecls RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl m = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls s = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecls(m, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methoddecls ::= methoddecl 
            {
              Methoddecls RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecl m = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecls(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecls",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // fielddecl ::= FINAL type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr oe = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl("final ", t, i, oe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // fielddecl ::= type ID optionalexpr SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Optionalexpr oe = (Optionalexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Fielddecl("", t, i, oe); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fielddecl ::= type ID OPENSQUARE INTLIT CLOSESQUARE SEMI 
            {
              Fielddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int l = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Fielddecl(t, i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fielddecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalexpr ::= EQUALS expr 
            {
              Optionalexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Optionalexpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalexpr ::= 
            {
              Optionalexpr RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methoddecl ::= type ID OPENPAREN argdecls CLOSEPAREN OPENCURLY fielddecls stmts CLOSECURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls as = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(t, i, as, fs, ss, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // methoddecl ::= type ID OPENPAREN argdecls CLOSEPAREN OPENCURLY stmts CLOSECURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Argdecls as = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(t, i, as, ss, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // methoddecl ::= VOID ID OPENPAREN argdecls CLOSEPAREN OPENCURLY stmts CLOSECURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Argdecls as = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(new Type("void"), i, as, ss, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // methoddecl ::= VOID ID OPENPAREN argdecls CLOSEPAREN OPENCURLY fielddecls stmts CLOSECURLY optionalsemi 
            {
              Methoddecl RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls as = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fs = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Methoddecl(new Type("void"), i, as, fs, ss, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methoddecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // optionalsemi ::= SEMI 
            {
              Optionalsemi RESULT =null;
		 RESULT = new Optionalsemi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // optionalsemi ::= 
            {
              Optionalsemi RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalsemi",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = new Type("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new Type("char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type("bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = new Type("float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argdecls ::= argdecllist 
            {
              Argdecls RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList a = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecls(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argdecls ::= 
            {
              Argdecls RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecls",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argdecllist ::= argdecl COMMA argdecllist 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList as = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a,as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argdecllist ::= argdecl 
            {
              ArgdeclList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl a = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgdeclList(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecllist",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // argdecl ::= type ID 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Argdecl(t,i,0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // argdecl ::= type ID OPENSQUARE CLOSESQUARE 
            {
              Argdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Argdecl(t,i,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argdecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmts(s, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmts ::= 
            {
              Stmts RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= whilestmt 
            {
              Stmt RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Whilestmt w = (Whilestmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= assign 
            {
              Stmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assign a = (Assign)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= io 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IO i = (IO)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= methodcall 
            {
              Stmt RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methodcall m = (Methodcall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= returnstmt 
            {
              Stmt RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Returnstmt r = (Returnstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= postfix 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Postfix p = (Postfix)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= struct 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Struct s = (Struct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= ifstmt 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ifstmt i = (Ifstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // whilestmt ::= WHILE OPENPAREN expr CLOSEPAREN stmt 
            {
              Whilestmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Whilestmt(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whilestmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assign ::= name EQUALS expr SEMI 
            {
              Assign RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(n, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // io ::= READ OPENPAREN readlist CLOSEPAREN SEMI 
            {
              IO RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IO(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // io ::= PRINT OPENPAREN printlist CLOSEPAREN SEMI 
            {
              IO RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IO(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // io ::= PRINTLN OPENPAREN printlinelist CLOSEPAREN SEMI 
            {
              IO RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist p = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IO(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // methodcall ::= ID OPENPAREN CLOSEPAREN SEMI 
            {
              Methodcall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Methodcall(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // methodcall ::= ID OPENPAREN args CLOSEPAREN SEMI 
            {
              Methodcall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Methodcall(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodcall",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // returnstmt ::= RETURN expr SEMI 
            {
              Returnstmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Returnstmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnstmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // returnstmt ::= RETURN SEMI 
            {
              Returnstmt RESULT =null;
		 RESULT = new Returnstmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnstmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // postfix ::= name INCREMENT SEMI 
            {
              Postfix RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Postfix(n, "++"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // postfix ::= name DECREMENT SEMI 
            {
              Postfix RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Postfix(n, "--"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfix",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // struct ::= OPENCURLY fielddecls stmts CLOSECURLY optionalsemi 
            {
              Struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls f = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Struct(f, s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // struct ::= OPENCURLY stmts CLOSECURLY optionalsemi 
            {
              Struct RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts s = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Optionalsemi os = (Optionalsemi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Struct(s, os); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ifstmt ::= IF OPENPAREN expr CLOSEPAREN stmt ifend 
            {
              Ifstmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfEnd ie = (IfEnd)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ifstmt(e, s, ie); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifstmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ifend ::= ELSE stmt FI 
            {
              IfEnd RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfEnd(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifend ::= FI 
            {
              IfEnd RESULT =null;
		 RESULT = new IfEnd(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifend",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // name ::= ID 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Name(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // name ::= ID OPENSQUARE expr CLOSESQUARE 
            {
              Name RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Name(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // args ::= expr COMMA args 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // args ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Args(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // readlist ::= name COMMA readlist 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist r = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // readlist ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Readlist(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readlist",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // printlinelist ::= printlist 
            {
              Printlinelist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlinelist(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // printlinelist ::= 
            {
              Printlinelist RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlinelist",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // printlist ::= expr COMMA printlist 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist p = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // printlist ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Printlist(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printlist",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= ID OPENPAREN CLOSEPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Expr(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= ID OPENPAREN args CLOSEPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args a = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(i, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int i = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(i, "intlit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(c, "charlit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(s, "strlit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double f = (double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(f, "floatlit"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Expr("true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Expr("false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= OPENPAREN expr CLOSEPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(e, "paren"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= TILDE expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(e, "tilde"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(e, "minus"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(e, "plus"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= OPENPAREN type CLOSEPAREN expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= binaryop 
            {
              Expr RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Binaryop b = (Binaryop)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= OPENPAREN expr COND1 expr COND2 expr CLOSEPAREN 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binaryop ::= expr MULT expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "*", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binaryop ::= expr DIV expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "/", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binaryop ::= expr PLUS expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "+", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binaryop ::= expr MINUS expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "-", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binaryop ::= expr LT expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "<", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binaryop ::= expr GT expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, ">", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binaryop ::= expr LTE expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "<=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binaryop ::= expr GTE expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, ">=", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binaryop ::= expr LOGEQUALS expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "==", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binaryop ::= expr NOTEQUAL expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "<>", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binaryop ::= expr LOGOR expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "||", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binaryop ::= expr LOGAND expr 
            {
              Binaryop RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binaryop(e1, "&&", e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryop",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
